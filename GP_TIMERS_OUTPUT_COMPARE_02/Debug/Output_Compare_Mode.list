
Output_Compare_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000198  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800035c  08000364  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800035c  0800035c  00010364  2**0
                  CONTENTS
  4 .ARM          00000000  0800035c  0800035c  00010364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800035c  08000364  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800035c  0800035c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000364  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000364  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010364  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000539  00000000  00000000  00010394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000011d  00000000  00000000  000108cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  000109f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000040  00000000  00000000  00010a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b04  00000000  00000000  00010a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000af3  00000000  00000000  0002959c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ae17  00000000  00000000  0002a08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4ea6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000088  00000000  00000000  000b4ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000344 	.word	0x08000344

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000344 	.word	0x08000344

08000204 <tim2_pa5_1hz_init>:


#define GPIOAEN (1U<<0)
#define AFR5_TIM (1U<<20)

void tim2_pa5_1hz_init(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0

	/*Enable the clock for PA5*/
	RCC -> AHB1ENR |= GPIOAEN;
 8000208:	4b22      	ldr	r3, [pc, #136]	; (8000294 <tim2_pa5_1hz_init+0x90>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a21      	ldr	r2, [pc, #132]	; (8000294 <tim2_pa5_1hz_init+0x90>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

	/*Enable the alternative function mode*/
	GPIOA -> MODER |= (1U << 11);
 8000214:	4b20      	ldr	r3, [pc, #128]	; (8000298 <tim2_pa5_1hz_init+0x94>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a1f      	ldr	r2, [pc, #124]	; (8000298 <tim2_pa5_1hz_init+0x94>)
 800021a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= ~(1U << 10);
 8000220:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <tim2_pa5_1hz_init+0x94>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a1c      	ldr	r2, [pc, #112]	; (8000298 <tim2_pa5_1hz_init+0x94>)
 8000226:	f463 6380 	orn	r3, r3, #1024	; 0x400
 800022a:	6013      	str	r3, [r2, #0]

	/*Set the alternative function type (AF01)*/
	GPIOA -> AFR[0] |= AFR5_TIM;   //Alternate function low register
 800022c:	4b1a      	ldr	r3, [pc, #104]	; (8000298 <tim2_pa5_1hz_init+0x94>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a19      	ldr	r2, [pc, #100]	; (8000298 <tim2_pa5_1hz_init+0x94>)
 8000232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000236:	6213      	str	r3, [r2, #32]


    /*Enable the Clock Access to TIM2*/
    RCC->APB1ENR |= TIM2EN;
 8000238:	4b16      	ldr	r3, [pc, #88]	; (8000294 <tim2_pa5_1hz_init+0x90>)
 800023a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800023c:	4a15      	ldr	r2, [pc, #84]	; (8000294 <tim2_pa5_1hz_init+0x90>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6413      	str	r3, [r2, #64]	; 0x40
	/*Set Pre-Scaler Value*/
    TIM2-> PSC = 1600 - 1 ;         // 16000000 / 1600 = 10000
 8000244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000248:	f240 623f 	movw	r2, #1599	; 0x63f
 800024c:	629a      	str	r2, [r3, #40]	; 0x28
	/*Set Auto-reload Value*/
    TIM2-> ARR = 10000 -1 ;       // 10000 / 10000 = 1
 800024e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000252:	f242 720f 	movw	r2, #9999	; 0x270f
 8000256:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Set output compare toggle mode*/
    TIM2 -> CCMR1 |= OC_TOGGLE ;
 8000258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000262:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000266:	6193      	str	r3, [r2, #24]

    /*Enable tim2 ch1 in compare mode*/
    TIM2 -> CCER |= CCER_CC1E;
 8000268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026c:	6a1b      	ldr	r3, [r3, #32]
 800026e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6213      	str	r3, [r2, #32]
	/*Clear Counter*/
    TIM2-> CNT = 0;
 8000278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800027c:	2200      	movs	r2, #0
 800027e:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable Timer*/
    TIM2-> CR1 = CR1_CEN;
 8000280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000284:	2201      	movs	r2, #1
 8000286:	601a      	str	r2, [r3, #0]
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40023800 	.word	0x40023800
 8000298:	40020000 	.word	0x40020000

0800029c <main>:
#include "stm32f4xx.h"
#include "TIMOCM.h"


int main(void){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
    /* Loop forever */
	tim2_pa5_1hz_init();
 80002a0:	f7ff ffb0 	bl	8000204 <tim2_pa5_1hz_init>
	while(1){
 80002a4:	e7fe      	b.n	80002a4 <main+0x8>
	...

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 f811 	bl	80002fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ffdf 	bl	800029c <main>

080002de <LoopForever>:

LoopForever:
  b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000364 	.word	0x08000364
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>
	...

080002fc <__libc_init_array>:
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	4d0d      	ldr	r5, [pc, #52]	; (8000334 <__libc_init_array+0x38>)
 8000300:	4c0d      	ldr	r4, [pc, #52]	; (8000338 <__libc_init_array+0x3c>)
 8000302:	1b64      	subs	r4, r4, r5
 8000304:	10a4      	asrs	r4, r4, #2
 8000306:	2600      	movs	r6, #0
 8000308:	42a6      	cmp	r6, r4
 800030a:	d109      	bne.n	8000320 <__libc_init_array+0x24>
 800030c:	4d0b      	ldr	r5, [pc, #44]	; (800033c <__libc_init_array+0x40>)
 800030e:	4c0c      	ldr	r4, [pc, #48]	; (8000340 <__libc_init_array+0x44>)
 8000310:	f000 f818 	bl	8000344 <_init>
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	10a4      	asrs	r4, r4, #2
 8000318:	2600      	movs	r6, #0
 800031a:	42a6      	cmp	r6, r4
 800031c:	d105      	bne.n	800032a <__libc_init_array+0x2e>
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f855 3b04 	ldr.w	r3, [r5], #4
 8000324:	4798      	blx	r3
 8000326:	3601      	adds	r6, #1
 8000328:	e7ee      	b.n	8000308 <__libc_init_array+0xc>
 800032a:	f855 3b04 	ldr.w	r3, [r5], #4
 800032e:	4798      	blx	r3
 8000330:	3601      	adds	r6, #1
 8000332:	e7f2      	b.n	800031a <__libc_init_array+0x1e>
 8000334:	0800035c 	.word	0x0800035c
 8000338:	0800035c 	.word	0x0800035c
 800033c:	0800035c 	.word	0x0800035c
 8000340:	08000360 	.word	0x08000360

08000344 <_init>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr

08000350 <_fini>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr
